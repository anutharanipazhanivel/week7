# -*- coding: utf-8 -*-
"""anu

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/12DrqjX6qTuaLlXLoybQvY4W5HShDK_gL
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, classification_report, confusion_matrix
import seaborn as sns
import matplotlib.pyplot as plt

from google.colab import files
uploaded = files.upload()

# Load the dataset
df = pd.read_csv('WA_Fn-UseC_-Telco-Customer-Churn.csv')

# Display the first few rows
df.head()

# Handle missing values
df = df.dropna()

# Convert categorical columns to numeric using LabelEncoder
labelencoder = LabelEncoder()
df['gender'] = labelencoder.fit_transform(df['gender'])
df['Partner'] = labelencoder.fit_transform(df['Partner'])
df['Dependents'] = labelencoder.fit_transform(df['Dependents'])
df['PhoneService'] = labelencoder.fit_transform(df['PhoneService'])
df['MultipleLines'] = labelencoder.fit_transform(df['MultipleLines'])
df['InternetService'] = labelencoder.fit_transform(df['InternetService'])
df['OnlineSecurity'] = labelencoder.fit_transform(df['OnlineSecurity'])
df['OnlineBackup'] = labelencoder.fit_transform(df['OnlineBackup'])
df['DeviceProtection'] = labelencoder.fit_transform(df['DeviceProtection'])
df['TechSupport'] = labelencoder.fit_transform(df['TechSupport'])
df['StreamingTV'] = labelencoder.fit_transform(df['StreamingTV'])
df['StreamingMovies'] = labelencoder.fit_transform(df['StreamingMovies'])
df['Contract'] = labelencoder.fit_transform(df['Contract'])
df['PaperlessBilling'] = labelencoder.fit_transform(df['PaperlessBilling'])
df['PaymentMethod'] = labelencoder.fit_transform(df['PaymentMethod'])
df['Churn'] = labelencoder.fit_transform(df['Churn'])

# Drop irrelevant columns
df = df.drop(['customerID'], axis=1)

# Define features and target variable
X = df.drop('Churn', axis=1)
y = df['Churn']

# Split the dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Initialize the StandardScaler
scaler = StandardScaler()

# Fit and transform the training data
X_train = scaler.fit_transform(X_train)

# Transform the testing data
X_test = scaler.transform(X_test)


# Initialize the RandomForestClassifier
rf = RandomForestClassifier(n_estimators=100, random_state=42)

# Train the model
rf.fit(X_train, y_train)

# Make predictions
y_pred = rf.predict(X_test)

# Evaluate the model
print("Accuracy Score:", accuracy_score(y_test, y_pred))
print("\nClassification Report:\n", classification_report(y_test, y_pred))
print("\nConfusion Matrix:\n", confusion_matrix(y_test, y_pred))

# Visualize the confusion matrix
plt.figure(figsize=(6, 6))
sns.heatmap(confusion_matrix(y_test, y_pred), annot=True, fmt='d', cmap='Blues')
plt.title('Confusion Matrix')
plt.xlabel('Predicted')
plt.ylabel('Actual')
plt.show()